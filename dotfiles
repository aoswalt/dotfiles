#! /bin/bash

# get script's directory
this_dir=$(cd $(dirname $0); pwd -P)

function log() {
  echo -e $1
}

function log_info() {
  [[ $verbose ]] && echo -e $1
}

function log_warn() {
  echo -e "${yellow}$1${normal}"
}

function log_error() {
  echo -e "${red}$1${normal}"
}

# try to create a symlink to $1 at $2
function try_link() {
  file=$1
  dst_dir=${2:-$HOME}
  src_dir=${3:-$this_dir}

  src_path=$src_dir/$file
  dst_path=$dst_dir/$file

  if [[ -e $dst_path || -L $dst_path ]]; then
    if [[ $force ]]; then
      choice='y'
    elif [[ ! -z $no_force ]]; then
      choice='n'
    else
      read -p "${cyan}$dst_path${normal} already exists. ${red}${bold}Remove?${normal} [y/${red}${bold}N${normal}]:  " choice
    fi

    if [[ $choice =~ ^[Yy] ]]; then
      log_info "Removing ${cyan}$dst_path${normal}"
      rm $dst_path
    else
      log_info "Not removing ${cyan}$dst_path${normal}"
    fi
  fi

  if [[ -e $dst_path || -L $dst_path ]]; then
    log_error "$dst_path already exists. Cannot create link."
    return 1
  fi

  ln -s $src_path $dst_path

  if [ $? -eq 0 ]; then
    log_info "Link created for ${cyan}$dst_path${normal}"
  else
    log_info "Could not create link for ${cyan}$dst_path${normal}"
    return 1
  fi
}

# clone and install asdf
function install_asdf() {
  if [[ $(command -v asdf) ]]; then
    log_info "asdf already installed"
  else
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1
    [ $? -ne 0 ] && return 1
  fi

  source $HOME/.asdf/asdf.sh
  log_info "asdf installed"

  # this is not yet automatically handled by asdf but may be soon
  log_info "installing asdf plugins"
  cut -d' ' -f 1 "$this_dir/.tool-versions" | xargs -I % asdf plugin add %

  log_info "installing asdf tool versions"
  asdf install
}

# link neovim files, add neovim python packages, and add edit overrides
function setup_neovim() {
  nvim_dir="$HOME/.config/nvim"
  mkdir -p $nvim_dir

  log_info "Clearing editor from git config to use env"
  git config --global --unset core.editor
  # git config --local --unset core.editor

  if [ -n "$(git config --system core.editor)" ]; then
    log_warn "WARNING: git system editor set"
  fi

  if [[ ! -e ~/init.after.vim && ! -L ~/int.after.vim ]]; then
    log_info "Adding init.after.vim for direct 'edit vim' mapping."
    echo "nnoremap <leader>ev :vsp $this_dir/init.vim<CR>" > ~/init.after.vim
    echo "nnoremap <leader>ez :vsp $this_dir/.zshrc<CR>" >> ~/init.after.vim
  else
    log_warn "init.after.vim already exists, not adding direct edit overrides."
  fi
}

# clone and install fzf
function setup_fzf() {
  if [[ $(command -v fzf) ]]; then
    log_info "fzf found - not cloning"
    return 0
  fi

  log_info "Cloning fzf"
  git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf
  log_info "Running fzf install"
  $HOME/.fzf/install --all

  [ $? -ne 0 ] && return 1
}

# set zsh as default shell
function set_zsh() {
  if [[ $(echo $SHELL | grep 'zsh') ]]; then
    log_info "Zsh already default shell"
    return 0
  fi

  if [[ ! $(grep zsh /etc/shells) ]]; then
    log_error "Zsh not found in /etc/shells"
    return 1
  fi

  chsh -s $(which zsh)

  [ $? -ne 0 ] && return 1

  # run zsh in current shell
  [[ ! -z $ZSH_NAME ]] && exec zsh
}

function add_git_config() {
  key=$1
  value=$2

  if [[ -z "$key" || -z "$value" ]]; then
    log_error "add_individual_git_config() requires 2 arguments: key and value"
    return 1
  fi

  if [[ ! $(git config --global "$key" 2>/dev/null) ]]; then
    git config --global "$key" "$value"
    log_info "Set global git config ${cyan}$key${normal} to ${cyan}$value${normal}"
    return 0
  fi

  if [[ $force ]]; then
    choice='y'
  elif [[ ! -z $no_force ]]; then
    choice='n'
  else
    read -p "Global git config ${cyan}$key${normal} already exists. ${red}${bold}Remove?${normal} [y/${red}${bold}N${normal}]:  " choice
  fi

  if [[ $choice =~ ^[Yy] ]]; then
    log_info "Overwriting global git config${cyan}$key${normal}"
  else
    log_info "Not removing global git config ${cyan}$key${normal}"
    return 0
  fi

  git config --global "$key" "$value"
  log_info "Set global git config ${cyan}$key${normal} to ${cyan}$value${normal}"
}

function setup_git_configs() {
  add_git_config 'core.excludesfile' "$HOME/.gitignore"

  # if [[ $(command -v diff-so-fancy) ]]; then
  #   add_git_config 'core.pager' 'diff-so-fancy | less --tabs=4 -RFX'
  #   add_git_config 'color.diff-highlight.oldnormal' 'red bold'
  #   add_git_config 'color.diff-highlight.oldhighlight' 'red bold 52'
  #   add_git_config 'color.diff-highlight.newnormal' 'green bold'
  #   add_git_config 'color.diff-highlight.newhighlight' 'green bold 22'
  # fi


  # git-delta config
# [pager]
#     diff = delta
#     log = delta
#     reflog = delta
#     show = delta

# [interactive]
#     diffFilter = delta --color-only --features=interactive

  add_git_config 'format.pretty' '%Cred%h%Creset - %s %Cgreen(%cr)%C(yellow)%d%Creset %C(bold blue)<%an>%Creset '

  if [[ $(command -v nvim) ]]; then
    add_git_config 'diff.tool' 'fugitive'
    add_git_config 'merge.tool' 'fugitive'
    add_git_config 'mergetool.fugitive.cmd' 'nvim -c "Gdiff" $MERGED'
    add_git_config 'mergetool.nvimdiff.cmd' 'nvim -d $BASE $LOCAL $REMOTE'
    add_git_config 'mergetool.keepbackup' 'false'
  fi
}

# print help and exit
function print_help() {
  echo '
usage: dotfiles <options>...

  -h, --help          Show help

Settings
  -f, --force         Force setup by answering `yes` to all overwrite prompts
  --no-force          Answer `no` to all prompts
  -v, --verbose       Show info output

Installing
  --all     Install and setup everything

  --files   Link a dotfiles for a tool (bash, neovim, tmux)
  --git     Add gitconfig QoL options
  --langs   Install languages with asdf (erlang, elixir, nodejs, postgres, python)
  --lsp     Install language servers (elixir-ls, pyls)
  --tools   Install tools, linking dotfiles as appropriate (eslint, fzf)
  --zsh     Set zsh as shell
'
}

if [[ ${opt_files:-$opt_all} ]]; then
  try_link .zshenv
  try_link .zshrc
  try_link .bashrc
  try_link .tmux.conf
  # try_link .eslintrc.json
  # try_link .xprofile
fi
